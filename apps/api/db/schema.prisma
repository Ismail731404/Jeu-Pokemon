generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int         @id @default(autoincrement())
  name            String
  pwd             String
  email           String
  inscriptionDate DateTime    @default(now())
  isValid         Boolean
  uniqueToken     String

  trainer         Trainer?
  allMyPokemon    Pokemon[]   @relation("pokemon-user")

  itemList        Item[]        @relation("user-items")
  @@unique([email, pwd], name: "emailpwd")
}

model Trainer {
  id              Int          @id @default(autoincrement())
  name            String
  gender          String
  battleAttacking Battle[]     @relation("attacking")
  battleOpposing  Battle[]     @relation("opposing")
  activeTeam      PokemonTeam?

  userId          Int          @unique
  User            User         @relation(fields: [userId], references: [id])
}

model Pokemon {
  id              Int          @id @default(autoincrement())
  pokedex         Int
  name            String
  exp             Int
  level           Int
  statsId Int                  @unique
  stats   Stats                @relation(fields: [statsId], references: [statsId])
  itemId  Int                  @unique
  item    Item                 @relation(fields: [itemId], references: [itemId])
  moves   Move[]               @relation("moves")

  battleAttacking Battle[]     @relation("attackingPokemon")
  battleOpposing  Battle[]     @relation("opposingPokemon")

  userId          Int
  user            User         @relation("pokemon-user", fields: [userId], references: [id])

  team          PokemonOnPokemonTeams[]

  types          Type[]        @relation("types")
}

model Battle {
  id                 Int        @id @default(autoincrement())
  attackingTrainerId Int
  opposingTrainerId  Int
  attackerPokemonId  Int
  opponentPokemonId  Int
  winner             Int

  attackingPokemon   Pokemon    @relation("attackingPokemon", fields: [attackerPokemonId], references: [id])
  attackingTrainer   Trainer    @relation("attacking", fields: [attackingTrainerId], references: [id])
  opposingPokemon    Pokemon    @relation("opposingPokemon", fields: [opponentPokemonId], references: [id])
  opposingTrainer    Trainer    @relation("opposing", fields: [opposingTrainerId], references: [id])
}

model Item {
  itemId  Int                   @id @default(autoincrement())
  name    String
  effect  Int
  pokemon Pokemon?
  userId Int
  user   User                   @relation("user-items", fields: [userId], references: [id])
}

model Move {
  moveId    Int     @id @default(autoincrement())
  name      String
  damage    Int
  pokemonId Int
  pokemon   Pokemon @relation("moves", fields: [pokemonId], references: [id])
}

model Stats {
  statsId Int      @id @default(autoincrement())
  attack  Int
  hp      Int
  pokemon Pokemon?
}


model PokemonOnPokemonTeams {
  pid           Int
  pokemonTeamId Int
  pokemon       Pokemon     @relation(fields: [pid], references: [id])
  pokemonTeam   PokemonTeam @relation(fields: [pokemonTeamId], references: [teamId])

  @@id([pid, pokemonTeamId])
}

model PokemonTeam {
  teamId      Int                     @id @default(autoincrement())
  trainerId   Int                     @unique
  pokemonList PokemonOnPokemonTeams[]
  trainer     Trainer                 @relation(fields: [trainerId], references: [id])
}


model Type{
    typeId  Int   @id @default(autoincrement())
    name  String  
    pokemonId Int
    pokemon   Pokemon @relation("types", fields: [pokemonId], references: [id])
}